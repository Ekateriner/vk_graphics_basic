#version 430

const uint array_part_size = 256;
shared float temp_res[array_part_size];

layout( local_size_x = 256 ) in;

layout( push_constant ) uniform params {
    uint len;
    uint stage; // 0 - multi scan, 1 - second scan
} PushConstant;

layout(std430, binding = 0) buffer array
{
    float Arr[];
};

layout(std430, binding = 1) buffer result
{
    float Result[];
};

layout(std430, binding = 2) buffer sums
{
    float Sums[];
};

void main() {
    uint idx = gl_WorkGroupID.x;
    uint left = idx * array_part_size;
    uint right = min((idx + 1) * array_part_size, PushConstant.len);
    uint local_len = right - left;

    uint local_idx = gl_LocalInvocationID.x;
    if (local_idx < local_len) {
        temp_res[local_idx] = Arr[left + local_idx];
    }
    if (local_idx >= local_len) {
        temp_res[local_idx] = 0;
    }

    for (uint i = 2; i <= array_part_size; i = i << 1) {
        barrier();
        if ((local_idx + 1) % i == 0) {
            temp_res[local_idx] += temp_res[local_idx - i/2];
        }
    }

    barrier();

    if (PushConstant.stage == 0 && local_idx == array_part_size - 1) {
        Sums[idx] = temp_res[local_idx];
    }

    if (local_idx == array_part_size - 1) {
        temp_res[local_idx] = 0;
    }

    for (uint i = array_part_size; i >= 2; i = i >> 1) {
        barrier();

        if ((local_idx + 1) % i == 0) {
            float temp = temp_res[local_idx];
            temp_res[local_idx] += temp_res[local_idx - i / 2];
            temp_res[local_idx - i / 2] = temp;
        }
    }

    barrier();
    if (local_idx < local_len) {
        Result[left + local_idx] = temp_res[local_idx];
    }
}
