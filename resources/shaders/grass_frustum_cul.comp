#version 430

const uint thread_count = 32;
layout( local_size_x = 32 ) in;

layout( push_constant ) uniform params {
    mat4 mProjView;
} PushConstant;

layout(binding = 0, set = 0) uniform land_info
{
    vec4 scale;
    vec4 trans;
    vec4 sun_pos;
    int width;
    int height;
};

layout(binding = 1, set = 0) uniform grass_info
{
    uvec2 tile_count;
    vec2 nearfar;
    uvec2 freq_min;
    uvec2 freq_max;
};

struct VkDrawIndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

layout(std430, binding = 2) buffer comamnd_buf
{
    VkDrawIndexedIndirectCommand grass_iicommand_buf;
};

layout(std430, binding = 3) buffer to_draw
{
    vec2 shifts_buf[]; // in tex_coord
};

const uint size = 10000; // it hurts, it's sad
shared uint buf_size;
shared uint local_instanceCount;
shared uint grass_inst_idx;

void main() {
    vec4 bbox_vert[8] = { vec4(1.0/tile_count.x, 1.0, 1.0/tile_count.y, 1.0f),
                          vec4(1.0/tile_count.x, 1.0, 0.0, 1.0f),
                          vec4(1.0/tile_count.x, 0.0, 1.0/tile_count.y, 1.0f),
                          vec4(1.0/tile_count.x, 0.0, 0.0, 1.0f),
                          vec4(0.0, 1.0, 1.0/tile_count.y, 1.0f),
                          vec4(0.0, 1.0, 0.0, 1.0f),
                          vec4(0.0, 0.0, 1.0/tile_count.y, 1.0f),
                          vec4(0.0, 0.0, 0.0, 1.0f)};
    buf_size = 0;
    grass_inst_idx = 0;

    barrier();

    for (uint i = 0; i < tile_count.x * tile_count.y; i += thread_count) {
        uint instance_idx = i + gl_LocalInvocationID.x;
        if (instance_idx < tile_count.x * tile_count.y) {
            bool left = true;
            bool right = true;
            bool up = true;
            bool down = true;
            bool forward = true;
            bool behind = true;

            float size = 1.0f;
            mat4 mModel = mat4(scale.x, 0, 0, 0,
                               0, scale.y, 0, 0,
                               0, 0, scale.z, 0,
                               trans.x, trans.y, trans.z, 1.0);

            int tile_i = int(mod(instance_idx, tile_count.x));
            int tile_j = int(instance_idx / tile_count.x);
            float mean_height = (trans.y + (scale.y + trans.y)) / 2;
            vec4 shift = vec4(tile_i * 1.0 / tile_count.x, 0.0, tile_j * 1.0 / tile_count.y, 0.0f);

            for(uint j = 0; j < 8; j++) {
                vec4 proj = PushConstant.mProjView * mModel * (bbox_vert[j] + shift);
                proj = proj / abs(proj.w);

                left = left && (proj.y < -size);
                right = right && (proj.y > size);

                forward = left && (proj.x < -size);
                behind = right && (proj.x > size);

                down = down && (proj.z < 0.0);
                up = up && (proj.z > 1.0);
            }

            if (!left && !right && !up && !down && !behind && !forward) {
                vec4 instance_pos = PushConstant.mProjView * mModel * (shift + vec4(0.5/tile_count.x, mean_height, 0.5/tile_count.y, 0));
                float depth = abs(instance_pos.z / instance_pos.w);

                uvec2 freq;
                if (depth <= nearfar.x) {
                    atomicAdd(local_instanceCount, freq_max.x * freq_max.y);
                    freq = freq_max;
                }
                else if (depth <= nearfar.y) {
                    vec2 new_freq = (nearfar.y - depth) / (nearfar.y - nearfar.x) * (freq_max - freq_min) + freq_min;
                    atomicAdd(local_instanceCount, int(floor(new_freq.x) * floor(new_freq.y)));
                    freq = uvec2(new_freq);
                }
                else {
                    atomicAdd(local_instanceCount, freq_min.x * freq_min.y);
                    freq = freq_min;
                }

                for (uint grass_i = 0; grass_i < freq.x; grass_i++) {
                    for (uint grass_j = 0; grass_j < freq.y; grass_j++) {
                        uint idx = atomicAdd(grass_inst_idx, 1);
                        shifts_buf[idx] = shift.xz + vec2(grass_i * 1.0 / (tile_count.x * freq.x), grass_j * 1.0 / (tile_count.y * freq.y));
                    }
                }
            }
        }
    }

    barrier();
    if (gl_LocalInvocationID.x == 0) {
        grass_iicommand_buf.indexCount = 3;
        grass_iicommand_buf.instanceCount = local_instanceCount;
        grass_iicommand_buf.firstIndex = 0;
        grass_iicommand_buf.vertexOffset = 0;
        grass_iicommand_buf.firstInstance = 0;
    }
}
